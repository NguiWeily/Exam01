Assignment name  : ft_range
Expected files   : ft_range.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write the following function:

int     *ft_range(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at start and end at end (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 1, 2 and 3.
- With (-1, 2) you will return an array containing -1, 0, 1 and 2.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing 0, -1, -2 and -3.

Here's an implementation of the `ft_range` function in C:

```c
#include <stdlib.h>

int *ft_range(int start, int end) {
    int size = abs(end - start) + 1;
    int *arr = malloc(sizeof(int) * size);
    
    if (arr == NULL) {
        return NULL; // Return NULL if malloc fails to allocate memory
    }
    
    int i;
    int step = (start <= end) ? 1 : -1;
    
    for (i = 0; i < size; i++) {
        arr[i] = start;
        start += step;
    }
    
    return arr;
}
```

In this implementation, the `ft_range` function takes two integers, `start` and `end`, as arguments. It calculates the size of the array by taking the absolute difference between `end` and `start` and adding 1 to account for inclusive values. It then allocates memory for the array using `malloc` and checks if the allocation was successful. If `malloc` fails to allocate memory, the function returns `NULL`.

Next, the function initializes a variable `step` based on whether `start` is less than or equal to `end`. If `start` is less than or equal to `end`, the step is set to 1, indicating that the values in the array should be increasing. Otherwise, if `start` is greater than `end`, the step is set to -1, indicating that the values should be decreasing.

The function then iterates from 0 to `size - 1` and assigns the corresponding value to each element of the array based on the `start` value. After assigning the value, the `start` value is incremented or decremented based on the `step` value.

Finally, the function returns a pointer to the first element of the array.

You can use this function to allocate and populate an array with consecutive values within a given range. Remember to free the allocated memory using `free` when you no longer need the array to avoid memory leaks.

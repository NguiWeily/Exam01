Assignment name  : last_word
Expected files   : last_word.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays its last word followed by a \n.

A word is a section of string delimited by spaces/tabs or by the start/end of
the string.

If the number of parameters is not 1, or there are no words, display a newline.

Example:

$> ./last_word "FOR PONY" | cat -e
PONY$
$> ./last_word "this        ...       is sparta, then again, maybe    not" | cat -e
not$
$> ./last_word "   " | cat -e
$
$> ./last_word "a" "b" | cat -e
$
$> ./last_word "  lorem,ipsum  " | cat -e
lorem,ipsum$
$>

Here's an example implementation of the `last_word` program in C:

```c
#include <unistd.h>

void last_word(char *str) {
    int i = 0;
    int start = -1;
    int end = -1;

    while (str[i]) {
        if (str[i] != ' ' && str[i] != '\t') {
            if (start == -1)
                start = i;
            end = i;
        }
        i++;
    }

    if (start != -1 && end != -1) {
        for (int j = start; j <= end; j++)
            write(1, &str[j], 1);
    }

    write(1, "\n", 1);
}

int main(int argc, char **argv) {
    if (argc == 2)
        last_word(argv[1]);
    else
        write(1, "\n", 1);

    return 0;
}
```

In this implementation, the `last_word` function takes a string as an argument. It iterates over each character in the string, tracking the start and end indices of the last word encountered. A word is considered any section of the string delimited by spaces or tabs.

After iterating over the string, the function checks if a valid word was found (i.e., the start and end indices are not -1). If a valid word exists, it uses the `write` function to write the characters of the last word to the standard output.

The `main` function checks if there is exactly one argument provided (the string). If so, it calls the `last_word` function with the argument. If there are no arguments or more than one argument, it simply writes a newline character to the standard output.

You can compile and run this program using a C compiler, such as `gcc`.

Assignment name  : ft_split
Expected files   : ft_split.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write a function that takes a string, splits it into words, and returns them as
a NULL-terminated array of strings.

A "word" is defined as a part of a string delimited either by spaces/tabs/new
lines, or by the start/end of the string.

Your function must be declared as follows:

char    **ft_split(char *str);

Here's an implementation of the `ft_split` function in C:

```c
#include <stdlib.h>

int is_delimiter(char c) {
    return c == ' ' || c == '\t' || c == '\n';
}

int count_words(char *str) {
    int count = 0;
    int is_word = 0;
    
    while (*str) {
        if (!is_delimiter(*str) && !is_word) {
            is_word = 1;
            count++;
        } else if (is_delimiter(*str)) {
            is_word = 0;
        }
        str++;
    }
    
    return count;
}

char **ft_split(char *str) {
    int word_count = count_words(str);
    char **result = malloc((word_count + 1) * sizeof(char *));
    if (result == NULL) {
        return NULL;
    }
    
    int word_index = 0;
    int word_length = 0;
    
    while (*str) {
        if (!is_delimiter(*str)) {
            word_length++;
            if (word_length == 1) {
                result[word_index] = str;
            }
        } else if (is_delimiter(*str) && word_length > 0) {
            result[word_index][word_length] = '\0';
            word_index++;
            word_length = 0;
        }
        str++;
    }
    
    result[word_index] = NULL;
    
    return result;
}
```

In this implementation, the `ft_split` function takes a string `str` as an argument and splits it into words. It returns a NULL-terminated array of strings where each string represents a word.

The `is_delimiter` function is a helper function that checks if a character is a delimiter, which in this case is defined as a space, tab, or newline character.

The `count_words` function counts the number of words in the string. It iterates through the characters of the string and increments the `count` variable whenever it encounters a non-delimiter character that is not part of a word. It returns the final count of words.

In the `ft_split` function, we first determine the number of words in the string by calling `count_words`. We allocate memory for the result array, which will hold pointers to the words, using `malloc` with a size of `(word_count + 1)` to account for the NULL terminator.

We then iterate through the characters of the string. If a character is not a delimiter, we increment the `word_length` variable. If `word_length` is 1, it means we have encountered the first character of a new word, so we set the corresponding pointer in the result array to point to this character.

If a character is a delimiter and the `word_length` is greater than 0, it means we have reached the end of a word. We add the null terminator at the end of the word by setting `result[word_index][word_length]` to `'\0'`, increment the `word_index` variable, and reset the `word_length` to 0.

After processing all the characters, we add the NULL terminator to mark the end of the result array.

Finally, we return the `result` array, which contains the NULL-terminated array of strings representing the words in the input string.

Remember to free the allocated memory, both for the result array and for the individual words, when you no longer need them to avoid memory leaks.

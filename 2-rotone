Assignment name  : rotone
Expected files   : rotone.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays it, replacing each of its
letters by the next one in alphabetical order.

'z' becomes 'a' and 'Z' becomes 'A'. Case remains unaffected.

The output will be followed by a \n.

If the number of arguments is not 1, the program displays \n.

Example:

$>./rotone "abc"
bcd
$>./rotone "Les stagiaires du staff ne sentent pas toujours tres bon." | cat -e
Mft tubhjbjsft ev tubgg of tfoufou qbt upvkpvst usft cpo.$
$>./rotone "AkjhZ zLKIJz , 23y " | cat -e
BlkiA aMLJKa , 23z $
$>./rotone | cat -e
$
$>
$>./rotone "" | cat -e
$
$>

Here's an example implementation of the `rotone` program in C:

```c
#include <unistd.h>

void rotone(char *str) {
    int i = 0;

    while (str[i]) {
        if ((str[i] >= 'a' && str[i] < 'z') || (str[i] >= 'A' && str[i] < 'Z'))
            str[i]++;
        else if (str[i] == 'z' || str[i] == 'Z')
            str[i] -= 25;
        write(1, &str[i], 1);
        i++;
    }
}

int main(int argc, char **argv) {
    if (argc == 2)
        rotone(argv[1]);
    write(1, "\n", 1);
    return 0;
}
```

In this implementation, the `rotone` function takes a string as an argument and performs the ROT1 encryption on each letter of the string. It uses a loop to iterate through each character of the string. If the character is a lowercase letter between 'a' and 'y', or an uppercase letter between 'A' and 'Y', it increments the character to get the next alphabetical letter. If the character is 'z' or 'Z', it wraps around to 'a' or 'A' respectively.

The `main` function checks if there is exactly one argument provided (the string to encrypt). If so, it calls the `rotone` function with the argument. After that, it writes a newline character to the standard output. If there are no arguments or more than one argument, it simply writes a newline character.

You can compile and run this program using a C compiler, such as `gcc`.

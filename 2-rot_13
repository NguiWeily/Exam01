Assignment name  : rot_13
Expected files   : rot_13.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes a string and displays it, replacing each of its
letters by the letter 13 spaces ahead in alphabetical order.

'z' becomes 'm' and 'Z' becomes 'M'. Case remains unaffected.

The output will be followed by a newline.

If the number of arguments is not 1, the program displays a newline.

Example:

$>./rot_13 "abc"
nop
$>./rot_13 "My horse is Amazing." | cat -e
Zl ubefr vf Nznmvat.$
$>./rot_13 "AkjhZ zLKIJz , 23y " | cat -e
NxwuM mYXVWm , 23l $
$>./rot_13 | cat -e
$
$>
$>./rot_13 "" | cat -e
$
$>

Here's an example implementation of the `rot_13` program in C:

```c
#include <unistd.h>

void rot_13(char *str) {
    int i = 0;

    while (str[i]) {
        if ((str[i] >= 'a' && str[i] <= 'm') || (str[i] >= 'A' && str[i] <= 'M'))
            str[i] += 13;
        else if ((str[i] >= 'n' && str[i] <= 'z') || (str[i] >= 'N' && str[i] <= 'Z'))
            str[i] -= 13;
        write(1, &str[i], 1);
        i++;
    }
}

int main(int argc, char **argv) {
    if (argc == 2)
        rot_13(argv[1]);
    write(1, "\n", 1);
    return 0;
}
```

In this implementation, the `rot_13` function takes a string as an argument and performs the ROT13 encryption on each letter of the string. It uses a loop to iterate through each character of the string. If the character is a lowercase letter between 'a' and 'm', or an uppercase letter between 'A' and 'M', it adds 13 to the character to get the corresponding ROT13 value. If the character is a lowercase letter between 'n' and 'z', or an uppercase letter between 'N' and 'Z', it subtracts 13 to get the ROT13 value.

The `main` function checks if there is exactly one argument provided (the string to encrypt). If so, it calls the `rot_13` function with the argument. After that, it writes a newline character to the standard output. If there are no arguments or more than one argument, it simply writes a newline character.

You can compile and run this program using a C compiler, such as `gcc`.
